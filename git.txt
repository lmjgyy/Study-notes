一、安装git
1.linux：
	1).查看是否安装sudo apt-get install git
	2).Debian或Ubuntu Linux 安装 sudo apt-get install git
	3).老一点的Debian或Ubuntu Linux，sudo apt-get install git-core
	4).其他Linux版本从Git官网下载源码，然后解压，依次输入：./config，make，sudo make install这几个命令安装就好
2.Windows
	1).Git官网直接下载安装程序，然后按默认选项安装即可
	2).设置：
		$ git config --global user.name "Your Name"
		$ git config --global user.email "email@example.com"
二、创建版本库
1.创建一个版本库
	1).创建一个空目录：
		$ mkdir learngit
		$ cd learngit
		$ pwd(显示当前目录) => /Users/michael/learngit
	2).$ git init(目录变成Git可以管理的仓库) => ~ -ah (可见git)
		tips: Initialized empty Git repository in /Users/michael/learngit/.git/
	3).$ git add readme.txt(将文件加入暂存区)
	4).$ git commit -m "wrote a readme file"(文件提交到仓库)
	5).$ git log --pretty=oneline(输出信息太多) => --pretty=oneline参数
2.版本回退
	1).$ git reset --hard HEAD^(回退版本 HEAD^^ =>上上版本 => HEAD~100)(清除修改)
	2).$ git reset --hard 1094a (恢复到回退前)
	3).$ git reflog (记录你的每一次命令)
3.工作区和暂存区
	stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD
	第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
	第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
4.管理修改
	第一次修改，并add，再次修改，并commit，此时commit的修改是第一次的，因为第二次修改在工作区，没有提交到暂存区
	1).$ git diff HEAD -- readme.txt (比较工作区和版本库最新版本的区别)
5.撤销修改
	1).$ git checkout -- readme.txt(文件在工作区的修改全部撤销)(清除修改) 修改readme.txt boss is cleaver => boss is stupid
	两种情况：
	 *自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态 => readme.txt boss is cleaver
	 *已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态 boss is stupid => boss isn't stupid 回退 => boss is stupid
	2).$ git restore -- readme.txt
	两种情况：
	 *git restore --staged 将文件从暂存区撤出，但不会撤销文件的更改 =>已经add,尚未commit
	 *git resore 将不在暂存区的文件撤销更改(清除修改)=>尚未add
6.删除文件
	1).rm <file> git在工作区或者暂存区也就是commit之前用rm，同时可以用git checkout -- <file>恢复文件
	2).git rm <file> git commit 之后，不能用git checkout 恢复
三、远程仓库(创建git本地仓，创建github远程仓，并同步两个仓)
	1).登陆github，然后右上角找到repositories new创建新仓库命名learngit，此时仓库为空
	2).创建本地仓，或者关联已有本地仓，formatter: '{value} kg'git remote add origin git@github.com:lmjgyy/learngit.git
	3).在github的settings/Manage access添加邮箱
	3).把本地库的所有内容推送到远程库(具体看第四点)
	 *git push -u origin master(-u参数能把本地master推送到远程新master，并关联本地master和远程master)，之后可简化命令
四、连接github (git 创建新分支，执行第三条，然后执行git push -u origin sit)
	1).在还未连上github时，提交git push origin master:dev,提示Please make sure you have the correct access rights
	此时是还未连上的。
	2).$ ssh-keygen -t rsa -C "a1043107645@qq.com" 在git上设置github邮箱之后确定生成ssh秘钥在user文件夹下，复制public文件
	到github/settings/ssh key
	3).检测是否连接成功$ ssh -T git@github.com。提示Hi lmjgyy! You've successfully authenticated, but GitHub does not provide shell access.
	则连接成功，这时可以正常push了
五、分支管理
1.创建与合并分支
	1).$ git checkout -b dev (创建并切换分支) == git branch dev => git checkout dev => git add . => git commit -m 'dev'
	   或 $ git switch -c dev
	2).切换分支，合并分支，删除分支
	   $ git checkout master
	   $ git merge dev -m 'merge'
	   $ git branch -d dev
2.解决冲突
	1).git merge => git status => git merge --abort
	2).打开文件解决冲突并且git add .
	3).git log --graph --pretty=oneline --abbrev-commit(查看分支状态)或git log --graph
3.分支管理策略
	$ git merge --no-ff -m "merge with no-ff" dev(--no-ff用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
	  而fast forward合并就看不出来曾经做过合并)
4.bug分支(处理bug)
	当你在开发dev分支时，master上出现bug，此时修建一个bug分支修复bug，但是你的dev上的修改还不想提交
	1).$ git stash(把当前工作现场“储藏”起来，等以后恢复现场后继续工作)
	2).$ git stash list
	3).$ git stash apply => git stash drop(git stash apply恢复，但是恢复后，stash内容并不删除，需要用git stash drop来删除)
	   $ git stash pop(恢复的同时把stash内容也删了)
	4).$ git stash apply stash@{0}(恢复指定的stash)
	5).dev stash之后切换分支master，switch -c bug 新建bug分支，改完分支后bug分支merge到master，
	   切换分支dev，然后git cherry-pick commitid合并bug分支修改的commit过来
5.feature(新功能分支)
	背景，开发新功能分支feature，后未开发完丢弃该分支并销毁，git branch -D feature
6.个人协作
	1.设置remote
	  * git remote add origin <url>
	  * git remote -v
	2.推送分支
	  *	git push origin master
	  * git push origin dev(推送到其他分支)
	3.抓取分支
	  * git clone -b <branch> <url>
	  * git pull <remote><branch>
	  $ git branch --set-upstream-to=origin/dev dev
	  如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>
六、命令行补充
1.commit
	$ git commit - m 'xxx' --amend (覆盖上次commit可重新说明)
2.remote
	$ git remote rm (删除远程主机
3.fetch
4.branch
	$ git branch -a 所有分支 git branch -r 查看远程分支
5.rebase -i(修改提交记录) commitid(起算点)
	1).vim命令
	一般模式 => 编辑模式 i,I,a,A,o,O,r,R => 屏幕的最下一行出现“INSERT或REPLACE”的字样 ,退出编辑模式esc
		小i  在光标所在行位置停止不动开始写入内容
		大I  在光标所在行行首开始写入内容
		小a  在光标所在行当前字符后开始写入内容
		大A  在光标所在行行尾开始写入内容
		小o  在光标所在行下一行开始写入内容
		大O  在光标所在行上一行开始写入内容
	命令模式下
		:w 保存文本
		:q 退出vim
		:wq 保存退出
		:e!将文档还原成最原始状态
		ZZ 若文档没有改动，则不储存离开，若文档改动过，则储存后离开，等同于:wq
		:set nu 在每行的行首显示行号
		:set nonu 取消行号
	
	.复制的命令是y，即yank（提起） ，常用的命令如下： 
		y    在使用v模式选定了某一块的时候，复制选定块到缓冲区用； 
		yy   复制整行（nyy或者yny ，复制n行，n为数字）； 
		y^   复制当前到行头的内容； 
		y$   复制当前到行尾的内容； 
		yw   复制一个word （nyw或者ynw，复制n个word，n为数字）； 
		yG   复制至档尾（nyG或者ynG，复制到第n行，例如1yG或者y1G，复制到档尾）  
	粘贴的命令式p，即put（放下） 
		p    小写p代表贴至游标后（下），因为游标是在具体字符的位置上，所以实际是在该字符的后面 
		P    大写P代表贴至游标前（上） 
	剪切的命令是d，即delete，d与y命令基本类似，所以两个命令用法一样，包括含有数字的用法.  
		d    剪切选定块到缓冲区； 
		dd   剪切整行 
		d^   剪切至行首 
		d$   剪切至行尾 
		dw   剪切一个word 
		dG   剪切至档尾  
	2). 如果是要修改commit 信息
		进入编辑模式改掉信息，并把pick改成edit，然后保存退出
		再git commit --amend 进入vim 输入修改信息 然后保存退出
		最后 git rebase --continue
		vim 内command
		变基时有六个命令可用：
		pick
		pick只是意味着包括提交。重新进行命令时，重新安排pick命令的顺序会更改提交的顺序。如果选择不包括提交，则应删除整行。
		====>修改顺序，删除提交
		reword
		该reword命令与相似pick，但是使用后，重新设置过程将暂停并为您提供更改提交消息的机会。提交所做的任何更改均不受影响。

		edit
		如果您选择edit提交，则将有机会修改提交，这意味着您可以完全添加或更改提交。您还可以进行更多提交，然后再继续进行变基。这使您可以将大型提交拆分为较小的提交，或者删除在提交中所做的错误更改。

		squash
		该命令使您可以将两个或多个提交合并为一个提交。提交被压缩到其上方的提交中。Git使您有机会编写描述这两个更改的新提交消息。

		fixup
		这类似于squash，但是要合并的提交已丢弃其消息。提交仅合并到其上方的提交中，并且较早提交的消息用于描述这两个更改。

		exec
		这使您可以对提交运行任意的Shell命令。