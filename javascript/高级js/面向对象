一、创建对象
	1.JavaScript对每个创建的对象都会设置一个原型，指向它的原型对象。
	当我们用obj.xxx访问一个对象的属性时，JavaScript引擎先在当前对象上查找该属性，如果没有找到，就到其原型对象上找，如果还没有找到，就一直上溯到Object.prototype对象，最后，如果还没有找到，就只能返回undefined。
	如：创建一个Array对象：
		var arr = [1, 2, 3];  ==>  arr ----> Array.prototype ----> Object.prototype ----> null(Array.prototype定义了indexOf()、shift()等方法，因此你可以在所有的Array对象上直接调用这些方法)
	如：当我们创建一个函数时：
		function foo() {      ==>  foo ----> Function.prototype ----> Object.prototype ----> null (由于Function.prototype定义了apply()等方法，因此，所有函数都可以调用apply()方法。)
			return 0;
		}
	2.构造函数
	如：function Student(name) {  ==>  xiaoming ----> Student.prototype ----> Object.prototype ----> null (如果不写new，这就是一个普通函数，它返回undefined。但是，如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;)
			this.name = name;
			this.hello = function () {
				alert('Hello, ' + this.name + '!');
			}
		}
		var xiaoming = new Student('小明');
		xiaoming.name; // '小明'
		xiaoming.hello(); // Hello, 小明!
	用new Student()创建的对象还从原型上获得了一个constructor属性，它指向函数Student本身：
		xiaoming.constructor === Student.prototype.constructor; // true
		Student.prototype.constructor === Student; // true
		Object.getPrototypeOf(xiaoming) === Student.prototype; // true
		xiaoming instanceof Student; // true
	这种方式 new 了多个对象同时会产生很多hello函数，但是xiaoming.hello === xiaohong.hello; // false，所以可以通过prototype
		Student.prototype.hello = function () { alert('Hello, ' + this.name + '!'); }
	在strict模式下，this.name = name将报错，因为this绑定为undefined，在非strict模式下，this.name = name不报错，因为this绑定为window，于是无意间创建了全局变量name，并且返回undefined，这个结果更糟糕。
	封装一个createStudent()函数
		function Student(props) {
			this.name = props.name || '匿名'; // 默认值为'匿名'
			this.grade = props.grade || 1; // 默认值为1
		}

		Student.prototype.hello = function () {
			alert('Hello, ' + this.name + '!');
		};

		function createStudent(props) {
			return new Student(props || {})
		}
		var xiaoming = createStudent({
			name: '小明'
		});

		xiaoming.grade; // 1
二、原型继承
	现在，我们要基于Student扩展出PrimaryStudent，可以先定义出PrimaryStudent：(调用了Student构造函数不等于继承了Student)
		function PrimaryStudent(props) {          ===> new PrimaryStudent() ----> PrimaryStudent.prototype ----> Object.prototype ----> null
			// 调用Student构造函数，绑定this变量:
			Student.call(this, props);
			this.grade = props.grade || 1;
		}
	必须想办法把原型链修改为： new PrimaryStudent() ----> PrimaryStudent.prototype ----> Student.prototype ----> Object.prototype ----> null
	新的基于PrimaryStudent创建的对象不但能调用PrimaryStudent.prototype定义的方法，也可以调用Student.prototype定义的方法。
		PrimaryStudent.prototype = Student.prototype;(错误)  ==> PrimaryStudent和Student共享一个原型对象，那还要定义PrimaryStudent干啥？
	函数F仅用于桥接，我们仅创建了一个new F()实例，而且，没有改变原有的Student定义的原型链。
		function inherit (Child, Parent) {
			var F = function () {}
			F.prototype = Parent.prototype
			Child.prototype = new F()
			Child.prototype.constructor = Child
		}
		
		function Student (props) {
			this.age = props.age || 18
			this.name = props.name || '匿名'
		}
		
		Student.prototype.hello = function () {
			alert('Hello, ' + this.name + '!');
		}
		
		function PrimaryStudent(props) {
			Student.call(this, props);
			this.grade = props.grade || 1;
		}
		
		// 实现原型继承链:
		inherits(PrimaryStudent, Student);
		
		// 绑定其他方法到PrimaryStudent原型:
		PrimaryStudent.prototype.getGrade = function () {
			return this.grade;
		};
三、Class继承
	如果用新的class关键字来编写Student，可以这样写：
		class Student {
			constructor(name) {
				this.name = name;
			}

			hello() {
				alert('Hello, ' + this.name + '!');
			}
		}
	比较一下就可以发现，class的定义包含了构造函数constructor和定义在原型对象上的函数hello()（注意没有function关键字），这样就避免了Student.prototype.hello = function () {...}这样分散的代码。
	Student派生一个PrimaryStudent需要编写的代码量。现在，原型继承的中间对象，原型对象的构造函数等等都不需要考虑了，直接通过extends来实现：
		class PrimaryStudent extends Student {
			constructor(name, grade) {
				super(name); // 记得用super调用父类的构造方法!
				this.grade = grade;
			}

			myGrade() {
				alert('I am at grade ' + this.grade);
			}
		}
	注意PrimaryStudent的定义也是class关键字实现的，而extends则表示原型链对象来自Student。子类的构造函数可能会与父类不太相同，例如，PrimaryStudent需要name和grade两个参数，并且需要通过super(name)来调用父类的构造函数，否则父类的name属性无法正常初始化。
	PrimaryStudent已经自动获得了父类Student的hello方法，我们又在子类中定义了新的myGrade方法。
四、常用继承方法
		function inherit (Child, Parent) {
            var f = function () {}
            f.prototype = Parent.prototype
            Child.prototype = new f()
            Child.prototype.constructor = Child
        }
        function Big (props) {
            this.name = props.name || 'xiaobai'
            this.work = props.work || 'xiagang'
            this.shilimethods = function () {
                alert(this.name + '实例方法')
            }
        }
        function Small (props) {
            Big.call(this,props)
            this.sex = props.sex || 'female'
        }
        Big.prototype.protomethod = function () {
            alert(this.name + '原型方法')
        }
        inherit(Small,Big)
        Small.prototype.self = function(){
            alert('这是我自己的方法')
        }
        var xiaoming = new Small({
            name: 'xiaoming',
            sex: 'man'
        })
        console.log(xiaoming)
        xiaoming.shilimethods()
        xiaoming.protomethod()
        xiaoming.self()
	